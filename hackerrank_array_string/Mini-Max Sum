import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
    // Write your code here
        int n = arr.size();
        long k = 0;
        Collections.sort(arr);
        for(int i = 0;i<n;i++)
        {
            k = k + arr.get(i);
            
        }
        long  max = k - arr.get(0);
        long min = k - arr.get(n-1);
        
//         // System.out.print(n);
//         long sum[]  = new long[n];
//         long s = 0;
//         // int j = 0;
//         for(int  i = 0;i<n;i++)
//         {
//                 for(int j = 0;j<n;j++)
//                 {
//                if(i != j)
//                {
//                     s = s + arr.get(j);
//                }
//                 }
            
//             sum[i] = s;
//             s = 0;
//         }
//         long max = Long.MIN_VALUE;
//         long min = Long.MAX_VALUE;
        
//         for(int i = 0;i<sum.length;i++)
//         {
//             if(max < sum[i]) max = sum[i];
//             if(min > sum[i]) min = sum[i];
            
//         }
        System.out.print(min+" "+max);
        // if(max == min) System.out.print("");
        

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.miniMaxSum(arr);

        bufferedReader.close();
    }
}
